"""
Note: TBC
"""

import networkx as nx
import numpy as np
import cartopy.crs as ccrs
from cartopy.io import shapereader as shpreader
from pyvis.network import Network
import matplotlib.pyplot as plt
import sys
import inspect
from os import path  # wacky method - crutches...

# set up directory to read data from parent directory
basepath = path.dirname(__file__)
filepath = path.abspath(path.join(basepath, "..",
                                  "temp_data_1948_2021.npy"))

# use the compiled npy data generated by utils.py
with open(filepath, 'rb') as f:
    T = np.load(f)
    lat = np.load(f)
    lon = np.load(f)

"""
This is a very whacky way to import from utils.py 
in the directory above without us using a package:
https://stackoverflow.com/questions/714063/importing-modules-
from-parent-folder
"""
currentdir = path.dirname(path.abspath(
                          inspect.getfile(
                          inspect.currentframe())))
parentdir = path.dirname(currentdir)
sys.path.insert(0, parentdir)
from utils import *

# get year data
year = 1972
print("Computing data for year:", year)
C, T_in, T_out = year_series(T, lat, lon, year)
print("Dimension of C matrix:", np.shape(C))

C_link = (C[:,:,1] < 151)
print("Dimension of C_link matrix:", np.shape(C_link))

node_sum = np.shape(C_link)[0] + np.shape(C_link)[1]
print("node_sum:", node_sum)
A_ij = np.zeros([node_sum, node_sum])
A_ij[0 : np.shape(C_link)[0],
     np.shape(C_link)[0] : node_sum] = C_link
A_ij[np.shape(C_link)[0] : node_sum,
     0 : np.shape(C_link)[0]] = C_link.transpose()

print("Dimension of A_ij adjacency matrix",
      np.shape(A_ij))

G = nx.from_numpy_matrix(A_ij, parallel_edges = False)
print(G.number_of_edges())

point_pos = {}

i = 0
for point in T_in:
    coord1, coord2 = point[-2].astype(int), point[-1].astype(int)
    point_pos.update({i:[(lon[coord1] + 178.25) % 360, lat[coord2]]})
    i += 1
for point in T_out:
    coord1, coord2 = point[-2].astype(int), point[-1].astype(int)
    point_pos.update({i:[(lon[coord1] + 178.25) % 360, lat[coord2]]})
    i += 1

color_map = []
for node in G:
    if node < 57:
        color_map.append('red')
    else: 
        color_map.append('blue')

# fig = plt.figure(figsize=(200, 200))
# pos = nx.random_layout(G)
G = G.subgraph(np.arange(56, 10224))
# color_map = color_map[:s]
# gcc = max(nx.connected_components(G), key=lambda x: len(x))
# H = G.subgraph(gcc)
# nx.draw(G, node_color = color_map, node_size=120, 
#          with_labels = True)
# plt.axis('equal')
# plt.show()
# fig.savefig('test.png')

# draw background map
crs = ccrs.PlateCarree(central_longitude = 178.25)
fig, ax = plt.subplots(
    1, 1, figsize=(200, 200),
    subplot_kw = dict(projection = crs))
ax.coastlines()
ax.set_global()

# draw network with networkx over catopy
nx.draw_networkx(G, ax = ax,
                 font_size = 16,
                 alpha = 0.8,
                 width = 0.5,
                 node_size = 15,
                 with_labels = False,
                 pos = point_pos,
                 cmap = plt.cm.autumn)

plt.show()
fig.savefig('test.png')